import Foundation

extension GenericLinuxBundler {
  /// Describes the structure of a bundle generated by ``GenericLinuxBundler``.
  struct BundleStructure {
    /// The root directory of the bundle.
    var root: URL
    /// The directory containing executables.
    var bin: URL
    /// The main executable.
    var mainExecutable: URL
    /// The directory containing dynamic libraries.
    var lib: URL
    /// The directory containing resources.
    var resources: URL
    /// The app's 1024x1024 icon file.
    var icon1024x1024: URL
    /// The app's `.desktop` file.
    var desktopFile: URL
    ///  The app's `.service` file. Only used for DBus activatable apps.
    var dbusServiceFile: URL

    /// Represents the bundle structure using the simple ``BundlerOutputStructure``
    /// data type.
    var asOutputStructure: BundlerOutputStructure {
      BundlerOutputStructure(bundle: root, executable: mainExecutable)
    }

    /// All directories in the structure. Used when creating the structure
    /// on disk.
    private var directories: [URL] {
      [
        root, bin, lib, resources,
        icon1024x1024.deletingLastPathComponent(),
        desktopFile.deletingLastPathComponent(),
        dbusServiceFile.deletingLastPathComponent(),
      ]
    }

    /// Computes the bundle structure corresponding to the provided context.
    init(at root: URL, forApp appName: String, withIdentifier appIdentifier: String) {
      self.root = root
      bin = root.appendingPathComponent("usr/bin")
      mainExecutable = bin.appendingPathComponent(appName.replacingOccurrences(of: " ", with: "-").lowercased())
      lib = root.appendingPathComponent("usr/lib")
      resources = bin
      // TODO: Resize the icon to 512x512, 1024x1024 isn't supported by xdg stuff
      //   but no one checks the actual size so we store it in 512x512 and it
      //   works as a workaround.
      icon1024x1024 = root.appendingPathComponent(
        "usr/share/icons/hicolor/512x512/apps/\(appIdentifier).png"
      )
      desktopFile = root.appendingPathComponent(
        "usr/share/applications/\(Self.desktopFileName(for: appIdentifier))"
      )
      dbusServiceFile = root.appendingPathComponent(
        "usr/share/dbus-1/services/\(Self.dbusServiceFileName(for: appIdentifier))"
      )
    }

    /// Creates all directories (including intermediate directories) required to
    /// create this bundle structure.
    func createDirectories() throws(Error) {
      do {
        for directory in directories {
          try FileManager.default.createDirectory(at: directory).unwrap()
        }
      } catch {
        throw Error(.failedToCreateBundleStructure(root: root))
      }
    }

    /// Computes the `.desktop` file name to use for the given app identifier.
    static func desktopFileName(for appIdentifier: String) -> String {
      "\(appIdentifier).desktop"
    }

    /// Computes the `.service` file name to use for the given app identifier.
    static func dbusServiceFileName(for appIdentifier: String) -> String {
      "\(appIdentifier).service"
    }
  }
}
