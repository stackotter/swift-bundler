{
  "abstract" : [
    {
      "text" : "Configuring your app.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/swift-bundler\/documentation\/swift-bundler"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/swift-bundler\/documentation\/swift-bundler\/configuration"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "swift-bundler"
      }
    ],
    "role" : "article",
    "roleHeading" : "Article",
    "title" : "Configuration"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift Bundler’s configuration is stored in the ",
              "type" : "text"
            },
            {
              "code" : "Bundler.toml",
              "type" : "codeVoice"
            },
            {
              "text" : " file in the root",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "directory of a package.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Example-configuration",
          "level" : 2,
          "text" : "Example configuration",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Below is an example configuration containing all fields.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "format_version = 2",
            "",
            "# `HelloWorld` here is the app's name. Use double quotes if your app's name",
            "# contains special characters such as spaces.",
            "[apps.HelloWorld]",
            "# The SwiftPM package executable product to bundle",
            "product = \"HelloWorld\"",
            "# The app's version, displayed on macOS's automatic 'About HelloWorld' screen.",
            "version = \"0.1.0\"",
            "# The app's identifier, used by bundlers which require reverse domain name",
            "# identifiers.",
            "identifier = \"com.example.HelloWorld\"",
            "# Only used by the Darwin bundler at the moment. Corresponds to Apple's category",
            "# identifiers. See https:\/\/developer.apple.com\/documentation\/bundleresources\/information-property-list\/lsapplicationcategorytype",
            "category = \"public.app-category.education\" # Optional",
            "# The app's icon. Must be a 1024x1024px PNG file, or a `.icns` file. `.icns`",
            "# files only work on Apple platforms.",
            "icon = \"icon.png\" # Optional",
            "",
            "# Extra entries for your app's Info.plist file. Currently has no effect on",
            "# Linux.",
            "[apps.HelloWorld.plist]",
            "# This could be any key-value pair, `CFBundleShortVersionString` is just an",
            "# example. Patterns of the form `$(...)` get replaced with their corresponding",
            "# values. See 'Variable substitutions' below.",
            "CFBundleShortVersionString = \"$(VERSION)_$(COMMIT_HASH)\"",
            "# You can also define many other kinds of complex fields that you want. Below",
            "# is how you would specify a list of URL schemes (http, ftp, and so on)",
            "# supported by a macOS app.",
            "CFBundleURLTypes = [ { type = \"dict\", value = { CFBundleTypeRole = 'Viewer', CFBundleURLName = 'HelloWorld', CFBundleURLSchemes = [ 'helloworld' ] } } ]"
          ],
          "syntax" : "toml",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Only the ",
                  "type" : "text"
                },
                {
                  "code" : "product",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "version",
                  "type" : "codeVoice"
                },
                {
                  "text" : " and ",
                  "type" : "text"
                },
                {
                  "code" : "identifier",
                  "type" : "codeVoice"
                },
                {
                  "text" : " fields are required.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Schema",
          "level" : 2,
          "text" : "Schema",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Some editors allow JSON schemas to be used when editing TOML files. If you’re",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using such an editor, Swift Bundler has a ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/github.com\/stackotter\/swift-bundler\/blob\/main\/Bundler.schema.json",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "schema file describing the ",
              "type" : "text"
            },
            {
              "code" : "Bundler.toml",
              "type" : "codeVoice"
            },
            {
              "text" : " format.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the schema is ever outdated, you can use ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/github.com\/stackotter\/swift-bundler\/blob\/main\/generate_schema.sh",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to generate the schema from the Swift Bundler source code as a quick fix, but",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "make sure to let me know anyway so that I can update it for everyone!",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "App-Icons",
          "level" : 2,
          "text" : "App Icons",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "To add an icon to your app, provide a value for the ",
              "type" : "text"
            },
            {
              "code" : "icon",
              "type" : "codeVoice"
            },
            {
              "text" : " field of your app’s",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "configuration.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Icons can either be ",
              "type" : "text"
            },
            {
              "code" : ".icns",
              "type" : "codeVoice"
            },
            {
              "text" : " files or 1024x1024px ",
              "type" : "text"
            },
            {
              "code" : ".png",
              "type" : "codeVoice"
            },
            {
              "text" : " files. ",
              "type" : "text"
            },
            {
              "code" : ".icns",
              "type" : "codeVoice"
            },
            {
              "text" : " is not",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "compatible with Linux. If you want cross-platform support or you want to use",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the same icon for all screen resolutions, provide the icon as a ",
              "type" : "text"
            },
            {
              "code" : ".png",
              "type" : "codeVoice"
            },
            {
              "text" : " file.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Otherwise use a ",
              "type" : "text"
            },
            {
              "code" : ".icns",
              "type" : "codeVoice"
            },
            {
              "text" : " file. The easiest method for creating an ",
              "type" : "text"
            },
            {
              "code" : "icns",
              "type" : "codeVoice"
            },
            {
              "text" : " file is",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to create an ",
              "type" : "text"
            },
            {
              "code" : "iconset",
              "type" : "codeVoice"
            },
            {
              "text" : " using Xcode and then run the following command.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/usr\/bin\/iconutil -c icns \/path\/to\/AppIcon.iconset"
          ],
          "syntax" : "sh",
          "type" : "codeListing"
        },
        {
          "anchor" : "Infoplist-customization",
          "level" : 2,
          "text" : "Info.plist customization",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you want to add extra key-value pairs to your app’s ",
              "type" : "text"
            },
            {
              "code" : "Info.plist",
              "type" : "codeVoice"
            },
            {
              "text" : ", you can",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "specify them in the app’s ",
              "type" : "text"
            },
            {
              "code" : "plist",
              "type" : "codeVoice"
            },
            {
              "text" : " field. Here’s an example configuration that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "appends the current commit hash to the version string displayed in the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "About HelloWorld",
              "type" : "codeVoice"
            },
            {
              "text" : " screen of the ",
              "type" : "text"
            },
            {
              "code" : "HelloWorld",
              "type" : "codeVoice"
            },
            {
              "text" : " app.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "# ...",
            "[apps.HelloWorld.plist]",
            "CFBundleShortVersionString = \"$(VERSION)_$(COMMIT_HASH)\""
          ],
          "syntax" : "toml",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Patterns of the form ",
              "type" : "text"
            },
            {
              "code" : "$(...)",
              "type" : "codeVoice"
            },
            {
              "text" : " get replaced with their corresponding values. See",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "#Variable-substitutions",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " below.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you provide a value for a key that is already present in the default",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "Info.plist",
              "type" : "codeVoice"
            },
            {
              "text" : ", the default value will be overidden with the value you provide.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Type-ambiguity",
          "level" : 3,
          "text" : "Type ambiguity",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Certain Property List field types such as ",
              "type" : "text"
            },
            {
              "code" : "data",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "date",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "integer",
              "type" : "codeVoice"
            },
            {
              "text" : " can’t be",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "distinguished using TOML syntax alone. Swift Bundler will throw an error if any",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "values cannot be decoded unambiguosly.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To disambiguate, you can convert the value to a TOML dictionary with separate",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "type",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "value",
              "type" : "codeVoice"
            },
            {
              "text" : " fields. For this reason, dictionaries with a ",
              "type" : "text"
            },
            {
              "code" : "type",
              "type" : "codeVoice"
            },
            {
              "text" : " field",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "also require disambiguation.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "header" : "row",
          "rows" : [
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Property List field type",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Requires disambiguation?",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Example",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "string",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "no",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "MyKey = \"My string\"",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "boolean",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "no",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "MyKey = true",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "array",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "no",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "MyKey = [1, \"A string\"]",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "real",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "no, ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "unless a whole number",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "MyKey = 1.2",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " or ",
                      "type" : "text"
                    },
                    {
                      "code" : "MyKey = { type = \"real\", value = 1.0 }",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "integer",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "no",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "MyKey = 1",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "date",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "inlineContent" : [
                        {
                          "text" : "yes",
                          "type" : "text"
                        }
                      ],
                      "type" : "strong"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "MyKey = { type = \"date\", value = \"2024-12-02T10:08:00Z\" }",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "data",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "inlineContent" : [
                        {
                          "text" : "yes",
                          "type" : "text"
                        }
                      ],
                      "type" : "strong"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "MyKey = { type = \"data\", value = \"b3R0ZXIncyBpbiBhIHN0YWNrPw==\" }",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", must be base64 encoded",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "dict",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "no, ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "unless it contains a ",
                          "type" : "text"
                        },
                        {
                          "code" : "type",
                          "type" : "codeVoice"
                        },
                        {
                          "text" : " key",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "MyKey = { major = 1, minor = 0 }",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " or ",
                      "type" : "text"
                    },
                    {
                      "code" : "MyKey = { type = \"dict\", value = { type = 1, tag = 0 } }",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ]
          ],
          "type" : "table"
        },
        {
          "anchor" : "Multi-app-packages",
          "level" : 2,
          "text" : "Multi-app packages",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift Bundler makes it trivial to create multiple apps from one package. Here’s",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an example configuration with a main app and an updater app.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "[apps.Example]",
            "identifier = \"com.example.Example\"",
            "product = \"Example\"",
            "version = \"0.1.0\"",
            "",
            "[apps.Updater]",
            "identifier = \"com.example.Updater\"",
            "product = \"Updater\"",
            "version = \"1.0.1\""
          ],
          "syntax" : "toml",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Once multiple apps are defined, certain commands such as ",
              "type" : "text"
            },
            {
              "code" : "run",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "bundle",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "require an app name in order to know which app to operate on.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "# Run the main app.",
            "swift bundler run Example",
            "# Run the updater.",
            "swift bundler run Updater"
          ],
          "syntax" : "sh",
          "type" : "codeListing"
        },
        {
          "anchor" : "Variable-substitutions",
          "level" : 2,
          "text" : "Variable substitutions",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Some configuration fields (currently only ",
              "type" : "text"
            },
            {
              "code" : "plist",
              "type" : "codeVoice"
            },
            {
              "text" : ") support variable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "substitution. This means that anything of the form ",
              "type" : "text"
            },
            {
              "code" : "$(VARIABLE)",
              "type" : "codeVoice"
            },
            {
              "text" : " within the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "field’s value will be replaced by the variable’s value. Below is a list of all",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "supported variables.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "header" : "row",
          "rows" : [
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Name",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Value",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "VERSION",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "The app’s version",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "COMMIT_HASH",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "The commit hash of the git repository at the package’s root directory. If there is no git repository, an error will be thrown.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ]
          ],
          "type" : "table"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "anchor" : "Getting-started",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/swift-bundler\/documentation\/swift-bundler\/installation",
        "doc:\/\/swift-bundler\/documentation\/swift-bundler\/creating-an-app"
      ],
      "title" : "Getting started"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/swift-bundler\/configuration"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"#Variable-substitutions": {
  "identifier" : "#Variable-substitutions",
  "title" : "Variable substitutions",
  "titleInlineContent" : [
    {
      "text" : "Variable substitutions",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "#Variable-substitutions"
},
"doc://swift-bundler/documentation/swift-bundler/creating-an-app": {
  "abstract" : [
    {
      "text" : "Creating a hello world app.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/swift-bundler\/documentation\/swift-bundler\/creating-an-app",
  "kind" : "article",
  "role" : "article",
  "title" : "Creating an app",
  "type" : "topic",
  "url" : "\/documentation\/swift-bundler\/creating-an-app"
},
"doc://swift-bundler/documentation/swift-bundler/installation": {
  "abstract" : [
    {
      "text" : "Installing Swift Bundler on your system.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/swift-bundler\/documentation\/swift-bundler\/installation",
  "kind" : "article",
  "role" : "article",
  "title" : "Installation",
  "type" : "topic",
  "url" : "\/documentation\/swift-bundler\/installation"
},
"doc://swift-bundler/documentation/swift-bundler": {
  "abstract" : [
    {
      "text" : "Create macOS apps with Swift packages instead of Xcode projects.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/swift-bundler\/documentation\/swift-bundler",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "swift-bundler",
  "type" : "topic",
  "url" : "\/documentation\/swift-bundler"
},
"https://github.com/stackotter/swift-bundler/blob/main/Bundler.schema.json": {
  "identifier" : "https:\/\/github.com\/stackotter\/swift-bundler\/blob\/main\/Bundler.schema.json",
  "title" : "Bundler.schema.json",
  "titleInlineContent" : [
    {
      "text" : "Bundler.schema.json",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/github.com\/stackotter\/swift-bundler\/blob\/main\/Bundler.schema.json"
},
"https://github.com/stackotter/swift-bundler/blob/main/generate_schema.sh": {
  "identifier" : "https:\/\/github.com\/stackotter\/swift-bundler\/blob\/main\/generate_schema.sh",
  "title" : "generate_schema.sh",
  "titleInlineContent" : [
    {
      "text" : "generate_schema.sh",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/github.com\/stackotter\/swift-bundler\/blob\/main\/generate_schema.sh"
}
}
}